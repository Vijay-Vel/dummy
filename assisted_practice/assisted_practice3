======================================================

Remote repository:
=======================================================

Creation of github account:
===================================================

Step2: Connect the SL lab to the github account so that we can push the data from local repo to remote repo


On the lab terminal:
====================================
Execute the command to generate SSH keys



Password less authentication between git(lab) and github servers --> SSH method

2 servers have to communicate we also have an authentication method of SSH

SSH command will generate public key and priavte key

copy public key on github account and save it

after this you can communicate with github from your lab terminal with any username or password


Execution:
============================

Step 1: generate SSH keys:

Go to lab terminal

# cd

# ssh-keygen

dont enter any thing.. just keep pressing enter for 3 times

You key will generated

The public key can be seen by exeucting below commad:

# cat /root/.ssh/id_rsa.pub

Step 2:

Copy the key carefully

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7MWRf5oD4jXnFIvIfpZlBvUpb/fiR3WpFiAnZJZ7hYeD7G+WPKjQ5FaYTl7m6g+h4kSwa1VwyoMnjBm/+rdc3r1nVH+HujpBxa39+5tM0pYHFNP/UOc1dqWpOjAZlM3j5OuoTNvBZqZ+vvQ5XQGXHXlk5MtOjxO91rEOqpWuqYewXT9L535vprwavlOKKAEpIKKyNXCITSc4kTiLz9uSVS9utDEnByI9ohYK83DxGcPK2gNlie6vgaM9IdFeTRgJ+538QmzHiHAwAhcRcPBjIRCRisWWiRL6HpYs0e5l1Z1CtHwC2VAb4Ui5vXDmXSP/kPZtWGCEwsX6RLKmonZE7 root@ip-172-31-22-237

Step 3: paste it on git hub

Step 4: Create a remote repository

===================================


Pull command
==================================
This operation is perfmoed on local git repo to get the files and commits from remote repo

git pull origin master


This command will perform 2 operations

1. fetch the changes form remote to local repo ---> it places the chnage sina  file called FETCH_HEAD
 
2. Adds the files into local repo and WD. also updates commit history

Fetch command:
=================================

If we want to just fetch the changes from remote repo into our local repo
to check if there are new changes in remote which are not in my local branch

Then we can use fetch command/operation

This command will perform 1 operation

1. fetch the changes from remote to local repo ---> it places the changes in a   file called FETCH_HEAD in .git folder

2. This command will not copy your files into local repo and WD. doesnot update commit history


Merge command:
==================================

works on local repository- in between you branches


1. How many branches we have it git. And then create a branch in git

   # git branch

Create a branch

   # git branch feature1  
   # git branch
  

2. switch to branch

  # git checkout feature1

3. Create some new commit on the new branch feature1

  # touch feature1file featurefile2
  # git add .
  # git commit -m "done on feature1"

4. Switch to master branch

  # git checkout master

5. merge the new branch to master branch

  # git merge feature1 master

=========================================

delete the branch feature1

# git branch -d fetaure1

Delete the commit history, so that i create new commit history to understand rebasing strategy

# git log --oneline

# git reset --hard <last commitid>

# git status

# git add .

# git commit -m "done"

==> git log --oneline ==> only 2 commit must be there.


====================================
Rebase Command: merging strategy
============================

1. Create a new branch feature1 (base of which is master) and switch to the branch 

# git branch

#  git checkout -b feature1

2. create new commits on feature 1 branch

  # touch file-feature
  # git add .
  # git commit -m "done on feature"

3. switch to master and create new commits

  # git checkout master

    # touch file-master
  # git add .
  # git commit -m "done on master"

4. No merging of feature1 on master -Done

5. Switch back to feature1 and do rebase command (re organize the base branch commits)

# git rebase master
